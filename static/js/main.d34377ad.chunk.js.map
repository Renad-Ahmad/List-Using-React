{"version":3,"sources":["components/manga-components/manga/comments-cmponents/comment/CommentItime.js","components/manga-components/manga/comments-cmponents/comment/CommentList.js","components/manga-components/manga/comments-cmponents/CommentsMain.js","components/manga-components/manga/MangaItem.js","components/manga-components/MainMangaList.js","components/MyList.js","App.js","Router.js","serviceWorker.js","index.js"],"names":["CommentItime","class","role","this","props","comment","type","onClick","removeComment","removeAllComment","React","Component","CommentList","allItems","i","commentItems","length","push","Comments","addComment","event","preventDefault","setState","state","newCommentItem","onTextBoxChange","target","value","commentString","newArray","index","indexOf","splice","className","bind","placeholder","onChange","MangaItem","src","mangaImage","alt","mangaTitle","mangaScore","addFave","elment","MainMangaList","allManga","mangaItem","map","item","image_url","title","score","MyList","App","mangaItems","myListItems","axios","method","url","then","response","data","top","catch","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8WACqBA,E,iLACT,IAAD,OACP,OACE,yBAAKC,MAAM,YAAYC,KAAK,SAC5B,4BAAKC,KAAKC,MAAMC,SAChB,8BACM,4BAAQC,KAAM,SAASL,MAAM,0CAA0CM,QAAS,kBAAI,EAAKH,MAAMI,cAAc,EAAKJ,MAAMC,WAAxH,UAEF,4BAAQC,KAAM,SAASL,MAAM,0CAA0CM,QAAS,kBAAI,EAAKH,MAAMK,iBAAiB,EAAKL,MAAMC,WAA3H,kBACA,4BAAQC,KAAM,SAASL,MAAM,2CAA7B,c,GATgCS,IAAMC,WCC3BC,E,2MAEnBJ,cAAgB,EAAKJ,MAAMI,c,wEAQxB,IADA,IAAMK,EAAW,GACTC,EAAE,EAAGA,GAAKX,KAAKC,MAAMW,aAAaC,OAAQF,IACjDD,EAASI,KAAK,kBAAC,EAAD,CAAcT,cAAeL,KAAKC,MAAMI,cAAeC,iBAAkBN,KAAKC,MAAMK,iBAAkBJ,QAASF,KAAKC,MAAMW,aAAaD,EAAE,MAGzJ,OACE,yBAAKb,MAAM,0BACX,4BAEGY,Q,GAlBgCH,IAAMC,WCA1BO,E,YAEnB,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAORe,WAAa,SAACC,GACbA,EAAMC,iBACJ,EAAKC,SAAS,CACZP,aAAa,GAAD,mBAAM,EAAKQ,MAAMR,cAAjB,CAA+B,EAAKQ,MAAMC,iBACtDA,eAAgB,MAZF,EAgBlBC,gBAAkB,SAACL,GAClB,EAAKE,SAAS,CACXE,eAAgBJ,EAAMM,OAAOC,SAlBf,EAsBlBnB,cAAgB,SAACoB,GAGnB,IAAMC,EAAS,YAAI,EAAKN,MAAMR,cAC1Be,EAAMD,EAASE,QAAQH,GAG5BC,EAASG,OAAOF,EAAO,GAEvB,EAAKR,SAAS,CAACP,aAAac,KA/BP,EA0ClBpB,iBAAmB,SAACW,GAEnB,IAAIU,EAAQ,EAAKP,MAAMR,aAAagB,QAAQX,GACzCU,GAAS,GACV,EAAKR,SAAS,CACZP,aAAc,EAAKQ,MAAMR,aAAaiB,OAAOF,EAAM,GACnDN,eAAgB,MA9CpB,EAAKD,MAAQ,CACXR,aAAc,GACdS,eAAgB,IAJD,E,sEAuDjB,OACE,yBAAKS,UAAU,WACb,wCACC,kBAAC,EAAD,CAAazB,cAAeL,KAAKK,cAChCC,iBAAkBN,KAAKM,iBAAiByB,KAAK/B,MAC7CY,aAAcZ,KAAKoB,MAAMR,eAE3B,8BACE,2BAAOT,KAAK,OAAO6B,YAAY,cAC3BR,MAAOxB,KAAKoB,MAAMC,eAClBY,SAAUjC,KAAKsB,kBAEnB,4BAAQnB,KAAM,SAASL,MAAM,0CAA0CM,QAASJ,KAAKgB,YAArF,yB,GArE4BT,IAAMC,WCCvB0B,E,iLAGV,IAAD,OACN,OACE,qCAAKpC,MAAM,OAAX,QAAsB,kBACpB,yBAAKA,MAAM,UAAUqC,IAAKnC,KAAKC,MAAMmC,WAAYC,IAAI,UAErD,yBAAKP,UAAU,QACb,4BAAK9B,KAAKC,MAAMqC,YAChB,qCAAWtC,KAAKC,MAAMsC,YACtB,4BAASpC,KAAM,SAASL,MAAM,0CAA0CM,QAAS,kBAAI,EAAKH,MAAMuC,QAAQ,EAAKvC,MAAMwC,UAAnH,YACA,kBAAC,EAAD,Y,GAZ6BlC,IAAMC,WCAxBkC,E,iLAGhB,IAAMC,EAAW3C,KAAKC,MAAM2C,UAAUC,KAAI,SAASC,GAEhD,OACE,kBAAC,EAAD,CACEV,WAAYU,EAAKC,UACjBT,WAAYQ,EAAKE,MACjBT,WAAYO,EAAKG,WAQvB,OACE,6BACE,wBAAInD,MAAM,aAAV,SACF,yBAAKA,MAAM,OACR6C,Q,GArBgCpC,IAAMC,WCF5B0C,E,iLAGjB,OACE,yBAAKpB,UAAU,WAEb,uCACA,4BAAQ3B,KAAK,UAAb,mB,GAP4BI,IAAMC,WCKrB2C,GCDgB5C,IAAMC,U,YDGzC,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KACDmB,MAAQ,CACXgC,WAAY,GACZC,YAAY,IAJG,E,iFAQE,IAAD,OAClBC,IAAM,CACJC,OAAQ,MACRC,IAAK,sDAGNC,MAAK,SAAAC,GACJ,EAAKvC,SAAS,CAAEiC,WAAYM,EAASC,KAAKC,SAG3CC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAYd,OACE,6BACE,kBAAC,EAAD,CAAelB,UAAW5C,KAAKoB,MAAMgC,kB,GAnCZ7C,IAAMC,YEMnByD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiB,c","file":"static/js/main.d34377ad.chunk.js","sourcesContent":["import React from 'react';\nexport default class CommentItime extends React.Component {\n  render() {\n    return (\n      <div class=\"btn-group\" role=\"group\" >\n      <li>{this.props.comment}</li>\n      <form>\n          { <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" onClick={()=>this.props.removeComment(this.props.comment)}>Delete</button>}\n          {/* { <button type= \"button\" onClick={()=>this.props.removeComment(this.props.comment)}>Delete</button>} */}\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" onClick={()=>this.props.removeAllComment(this.props.comment)}>Clear Comments</button>\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\">Edit</button>\n      </form>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport CommentItime from './CommentItime';\nexport default class CommentList extends React.Component {\n\n  removeComment = this.props.removeComment;\n  \n  render() {\n    //console.log(this.props.removeComment)\n    // const allItems = this.props.commentItems.map(function(comment) {\n    //   return <CommentItime removeComment comment={comment}/>;\n    // });\n     const allItems = [];\n     for(let i=1; i <= this.props.commentItems.length; i++){\n      allItems.push(<CommentItime removeComment={this.props.removeComment} removeAllComment={this.props.removeAllComment} comment={this.props.commentItems[i-1]}/>);\n     }\n    \n    return (\n      <div class=\"row align-items-center\">\n      <ul>\n        {/* <button onClick={this.removeComment(\"a\")}>Delete</button>  */}\n        {allItems}\n      </ul>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport CommentList from './comment/CommentList';\nexport default class Comments extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      commentItems: [],\n      newCommentItem: '',\n    };\n  }\n  \n  addComment = (event) => {\n   event.preventDefault();\n     this.setState({\n       commentItems: [...this.state.commentItems, this.state.newCommentItem],\n       newCommentItem: '',\n     });\n   }\n\n   onTextBoxChange = (event) => {\n    this.setState({\n       newCommentItem: event.target.value\n     });\n   }\n\n   removeComment = (commentString) => {\n// index represnt the index we need to delete\n//  take a copy of the array we need to delete from\n const newArray=[...this.state.commentItems]\n let index=newArray.indexOf(commentString)\n\n// use splice (inmdex start delete from , how many I need to delete)\nnewArray.splice(index, 1)\n//put the new array in commititems setstate\nthis.setState({commentItems:newArray})\n  }\n\n  // removeAllComment = (commentString) => {\n  //    const newArray=[...this.state.commentItems]\n  //    let index=newArray.indexOf(commentString)\n    \n  //    newArray.splice(index)\n  //    this.setState({commentItems:newArray})\n  //   }\n\n   removeAllComment = (event) => {\n    //event.preventDefault();\n    let index = this.state.commentItems.indexOf(event);\n    if(index > -1){\n      this.setState({\n        commentItems: this.state.commentItems.splice(index,0),\n        newCommentItem: '',\n      });\n    }\n  }\n\n  render(){\n    \n    return(\n      <div className=\"Comment\">\n        <h4>Comments</h4>\n         <CommentList removeComment={this.removeComment}\n          removeAllComment={this.removeAllComment.bind(this)} \n          commentItems={this.state.commentItems}/>\n         {/* <CommentList removeAllComment={this.removeComment.bind(this)} commentItems={this.state.commentItems}/> */}\n        <form>\n          <input type=\"text\" placeholder=\"Add Comment\"\n              value={this.state.newCommentItem}\n              onChange={this.onTextBoxChange}\n           />\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" onClick={this.addComment}>Add New Comment</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Comments from './comments-cmponents/CommentsMain';\n\nexport default class MangaItem extends React.Component{\n\n\n  render(){\n    return(\n      <div class=\"row\"class=\"col-6 col-sm-3\">\n        <img class=\"rounded\" src={this.props.mangaImage} alt=\"Image\" />\n\n        <div className=\"info\">\n          <h3>{this.props.mangaTitle}</h3>\n          <p>Score: {this.props.mangaScore}</p>\n          <button  type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" onClick={()=>this.props.addFave(this.props.elment)}>Favorite</button>\n          <Comments />\n        </div>\n      </div>\n        );\n      }\n}\n","import React from 'react';\nimport MangaItem from \"./manga/MangaItem\";\n\nexport default class MainMangaList extends React.Component{\n\n  render(){\n     const allManga = this.props.mangaItem.map(function(item){\n\n        return (\n          <MangaItem\n            mangaImage={item.image_url}\n            mangaTitle={item.title}\n            mangaScore={item.score}\n            // myMangaItems={this.props.includs(item)}\n            // addFave={()=>this.props.addFave(item)}\n            //newFaveLists={()=>this.props.newFaveLists()}\n          />\n        )\n      });\n\n      return(\n        <div>\n          <h1 class=\"display-1\">MANGA</h1>\n        <div class=\"row\">\n          {allManga}\n        </div>  \n        </div>        \n      );\n    }\n}\n","import React from 'react';\nexport default class MyList extends React.Component{\n\n  render(){\n    return(\n      <div className=\"my-List\">\n\n        <h1>MY LIST</h1>\n        <button type=\"submit\">Remove All</button>\n        \n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport   './App.css';\nimport axios from \"axios\";\nimport Router from './Router';\nimport MainMangaList from \"./components/manga-components/MainMangaList\";\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mangaItems: [],\n      myListItems:[],\n     }\n  } \n\n  componentDidMount() {\n    axios({\n      method: \"get\",\n      url: \"https://api.jikan.moe/v3/top/manga/1/bypopularity\"\n    })\n\n    .then(response =>{\n      this.setState({ mangaItems: response.data.top });\n    })\n\n    .catch(error=> {\n      console.log(error);\n    });\n}\n\n// addFave=(elment)=>{\n//   const myListItems=[...this.state.myListItems];\n\n//   myListItems.push(elment)\n//   this.setState({myListItems})\n// }\n\n  render(){\n    return(\n      <div>\n        <MainMangaList mangaItem={this.state.mangaItems} \n        //myMangaItems={this.state.addFave}\n        // addFave={this.addFave}\n        /> \n      </div>\n    );\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport MainMangaList from \"./components/manga-components/MainMangaList\";\nimport MyList from \"./components/MyList\";\n\nexport default class Display extends React.Component {\n\n    render(){\n        return(\n            <Router>\n                <Link to=\"/\">MANGA</Link>\n                <Link to=\"/MyList\">MY LIST</Link>\n                <div>\n                    <Route  exact path=\"/\" component={MainMangaList.mangaItem}/>\n                    <Route  path=\"/MyList\" component={() => (<MyList/>)} />\n                </div>\n            </Router>  \n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}