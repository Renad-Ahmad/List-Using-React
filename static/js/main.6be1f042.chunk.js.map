{"version":3,"sources":["components/manga-components/manga/comments-cmponents/comment/CommentItime.js","components/manga-components/manga/comments-cmponents/comment/CommentList.js","components/manga-components/manga/comments-cmponents/CommentsMain.js","components/manga-components/manga/MangaItem.js","components/manga-components/MainMangaList.js","App.js","serviceWorker.js","index.js"],"names":["CommentItime","props","onTextBoxChange","event","setState","newComment","target","value","state","this","comment","class","type","placeholder","onChange","onClick","removeComment","removeAllComment","editComment","React","Component","CommentList","allItems","i","commentItems","length","push","Comments","addComment","preventDefault","newCommentItem","newArray","index","indexOf","commentString","splice","className","bind","MangaItem","markAsFavorite","backgroundColor","src","mangaImage","alt","mangaTitle","mangaScore","style","MainMangaList","allManga","mangaItem","map","item","image_url","title","score","App","mangaItems","myListItems","axios","method","url","then","response","data","top","catch","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6be1f042.chunk.js","sourcesContent":["import React from 'react';\nexport default class CommentItime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newComment: '',\n    };\n  }\n\n   onTextBoxChange = (event) => {\n    this.setState({\n      newComment: event.target.value\n     });\n   }\n\n  render() {\n    return (\n      <div>\n         <li>{this.props.comment}</li>\n        <div class=\"row\">\n        <form>\n          <input type=\"text\" placeholder=\"edit Comment\"\n                value={this.state.newComment}\n                onChange={this.onTextBoxChange} />\n                \n          {/*    Delete button   */}\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" \n            onClick={()=>this.props.removeComment(this.props.comment)}>Delete</button>\n          {/*    Clear All button Comments  */}\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" \n            onClick={()=>this.props.removeAllComment(this.props.comment)}>Clear Comments</button>\n           {/*    Edit button   */}\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\"\n            onClick={()=>this.props.editComment(this.props.comment,this.state.newComment)}>Edit</button>\n        </form>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport CommentItime from './CommentItime';\nexport default class CommentList extends React.Component {\n\n  render() {\n     const allItems = [];\n     for(let i=0; i < this.props.commentItems.length; i++){\n      allItems.push(<CommentItime removeComment={this.props.removeComment} \n        removeAllComment={this.props.removeAllComment} \n        editComment={this.props.editComment}\n        comment={this.props.commentItems[i]}/>);\n     }\n    \n    return (\n      <div class=\"row align-items-center\">\n      <ul>\n        {allItems}\n      </ul>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport CommentList from './comment/CommentList';\nexport default class Comments extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      commentItems: [],\n      newCommentItem: '',\n    };\n  }\n  \n  addComment = (event) => {\n   event.preventDefault();\n     this.setState({\n       commentItems: [...this.state.commentItems, this.state.newCommentItem],\n       newCommentItem: '',\n     });\n   }\n   \n   onTextBoxChange = (event) => {\n     this.setState({\n       newCommentItem: event.target.value\n     });\n   }\n\n   editComment=(comment,newComment)=>{\n      const newArray=[...this.state.commentItems]\n      let index=newArray.indexOf(comment)\n      newArray[index]=newComment;\n\n      this.setState({\n        commentItems:newArray\n      })\n  }\n\n   removeComment = (commentString) => {\n      // index represnt the index we need to delete\n      // take a copy of the array we need to delete from\n      const newArray=[...this.state.commentItems]\n      let index=newArray.indexOf(commentString)\n      // use splice (inmdex start delete from , how many I need to delete)\n      newArray.splice(index, 1)\n      //put the new array in commititems setstate\n      this.setState({commentItems:newArray})\n  }\n\n   removeAllComment = (event) => {\n    let index = this.state.commentItems.indexOf(event);\n    if(index > -1){\n      this.setState({\n        commentItems: this.state.commentItems.splice(index,0),\n        newCommentItem: ''\n      });\n    }\n  }\n\n  render(){\n    \n    return(\n      <div className=\"Comment\">\n        <h4>Comments</h4>\n         <CommentList removeComment={this.removeComment}\n                      removeAllComment={this.removeAllComment.bind(this)} \n                      commentItems={this.state.commentItems}\n                      editComment={this.editComment}/>\n        <form>\n          <input type=\"text\" placeholder=\"Add Comment\"\n              value={this.state.newCommentItem}\n              onChange={this.onTextBoxChange}\n           />\n          <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\" \n                  onClick={this.addComment}>Add New Comment\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Comments from './comments-cmponents/CommentsMain';\n\nexport default class MangaItem extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      backgroundColor: 'gray'\n    };\n  }\n\n  markAsFavorite = () => {\n    this.setState({ backgroundColor: 'orange'})\n  }\n   \n  render(){\n          \n    return(\n      <div class=\"row\"class=\"col-6 col-sm-3\">\n        <img class=\"rounded\" src={this.props.mangaImage} alt=\"Image\" />\n\n        <div>\n          <h3>{this.props.mangaTitle}</h3>\n          <p>Score: {this.props.mangaScore}</p>\n          <Comments />\n        </div>\n\n           {/*    Favorite button   */}\n        <button type= \"button\" class=\"btn btn-outline-light btn btn-secondary\"  onClick={this.markAsFavorite}\n         style={{backgroundColor:this.state.backgroundColor}}\n        >Favorite</button>\n      </div>\n        );\n      }\n}\n","import React from 'react';\nimport MangaItem from \"./manga/MangaItem\";\n\nexport default class MainMangaList extends React.Component{\n\n  render(){\n     const allManga = this.props.mangaItem.map(function(item){\n\n        return (\n          <MangaItem\n            mangaImage={item.image_url}\n            mangaTitle={item.title}\n            mangaScore={item.score}/>\n        )\n      });\n\n      return(\n        <div>\n          <h1 class=\"display-1\">MANGA</h1>\n        <div class=\"row\">\n          {allManga}\n        </div>  \n        </div>        \n      );\n    }\n}\n","import React from 'react';\nimport   './App.css';\nimport axios from \"axios\";\nimport MainMangaList from \"./components/manga-components/MainMangaList\";\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mangaItems: [],\n      myListItems:[],\n     }\n  } \n\n  componentDidMount() {\n    axios({\n      method: \"get\",\n      url: \"https://api.jikan.moe/v3/top/manga/1/bypopularity\"\n    })\n\n    .then(response =>{\n      this.setState({ mangaItems: response.data.top });\n    })\n\n    .catch(error=> {\n      console.log(error);\n    });\n}\n\n  render(){\n    return(\n      <div>\n        <MainMangaList mangaItem={this.state.mangaItems}/> \n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}